from typing import Optional
from uuid import UUID
import streamlit as st
from streamlit_local_storage import LocalStorage
import asyncio

from src.data.models.user import User
from src.data.db import db
from src.core.config import logger


class UserService:
    def __init__(self):
        self.local_storage = LocalStorage()
        self.USER_KEY = "current_user_id"

    async def _ensure_db(self):
        """Ensure database is initialized"""
        try:
            await db.init_db()
        except Exception as e:
            logger.error(f"Error initializing database: {str(e)}")
            raise

    async def create_user(self) -> User:
        """Create a new user in the database

        Returns:
            User: The created user instance
        """
        try:
            await self._ensure_db()
            db_user = await db.prisma.user.create(
                data={}  # ID will be auto-generated by Prisma
            )
            return User(id=UUID(db_user.id))
        except Exception as e:
            logger.error(f"Error creating user: {str(e)}")
            raise

    async def get_user(self, user_id: str) -> Optional[User]:
        """Get a user from the database by ID

        Args:
            user_id (str): The user's ID to look for

        Returns:
            Optional[User]: The user if found, None otherwise
        """
        try:
            await self._ensure_db()
            db_user = await db.prisma.user.find_unique(
                where={
                    "id": user_id
                }
            )
            return User(id=UUID(db_user.id)) if db_user else None
        except Exception as e:
            logger.error(f"Error getting user: {str(e)}")
            return None

    async def delete_user(self, user_id: str) -> bool:
        """Delete a user from the database

        Args:
            user_id (str): The ID of the user to delete

        Returns:
            bool: True if successful, False otherwise
        """
        try:
            await self._ensure_db()
            await db.prisma.user.delete(
                where={
                    "id": user_id
                }
            )
            self.local_storage.deleteItem(self.USER_KEY)
            return True
        except Exception as e:
            logger.error(f"Error deleting user: {str(e)}")
            return False

    async def load_from_storage(self) -> User:
        """Load user from local storage or create new one if not found

        This method will:
        1. Try to get user ID from localStorage
        2. If found, try to get user from database
        3. If not found in either place, create new user

        Returns:
            User: The loaded or created user instance
        """
        await self._ensure_db()
        user_id = self.local_storage.getItem(self.USER_KEY)

        if user_id:
            # Try to get existing user
            user = await self.get_user(user_id)
            if user:
                return user

        # Create new user if not found
        user = await self.create_user()
        self.local_storage.setItem(self.USER_KEY, str(user.id))
        return user
